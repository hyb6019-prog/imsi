package kr.co.iei.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttribute;

import jakarta.servlet.http.HttpSession;
import kr.co.iei.member.model.service.MemberService;
import kr.co.iei.member.model.vo.Member;

@Controller
@RequestMapping(value="/member")
public class MemberController {
	
	@Autowired //의존성 주입
	private MemberService memberService;
	
	@GetMapping(value="/loginFrm")	//로그인 페이지로 이동
	public String loginFrm() {
		return "member/login";
	}
	
	@PostMapping(value="/login")
	public String login(Member m, Model model, HttpSession session) {
		//로그인 -> 가입할 당시 입력했던 아이디와 비밀번호가 일치하면 -> 회원정보를 저장해놓고 사용
		//-> select * from member_tbl where member_id=? and member_pw=?
		System.out.println(m);
		Member member = memberService.login(m);
		System.out.println(member);
		//로그인 결과
		//1. 아이디 or 패스워드가 잘못된 경우	-> member == null
		//2. 아이디 and 패스워드는 정상이지만 -> 등급이 준회원인 경우 -> 조회결과의 memberLevel == 3
		//3. 아이디 and 패스워드도 정상이고 -> 등급이 정회원 or 관리자인경우 -> 조회결과의 memberLevel == 1 or 2
		if(member == null) {
			//1. 아이디 or 패스워드가 잘못된 경우	-> member == null
			//아이디 또는 패스워드를 확인하세요 라는 메세지를 보여주고 로그인페이지로 이동
			model.addAttribute("title", "로그인 실패");
			model.addAttribute("text", "아이디 또는 비밀번호를 확인하세요");
			model.addAttribute("icon", "error");
			model.addAttribute("loc", "/member/loginFrm");
			return "common/msg";
		}else {
			if(member.getMemberLevel() == 3) {
				//2. 아이디 and 패스워드는 정상이지만 -> 등급이 준회원인 경우 -> 조회결과의 memberLevel == 3
				//권한이 없습니다. 관리자에게 문의하세요. 라는 메세지를 보여주고 메인페이지로 이동
				model.addAttribute("title", "로그인 권한없음");
				model.addAttribute("text", "관리자에게 문의하세요");
				model.addAttribute("icon", "warning");
				model.addAttribute("loc", "/");
				return "common/msg";
			}else {
				//3. 아이디 and 패스워드도 정상이고 -> 등급이 정회원 or 관리자인경우 -> 조회결과의 memberLevel == 1 or 2
				//로그인 -> 아이디/패스워드로 신원 인증
				//			-> 해당 웹사이트 이용 시 내 정보를 지속적으로 사용하기 위해서
				//			-> 로그인 한 회원 정보를 페이지를 사용하는 동안 지속시키는게 목적
				//			-> 이 때 model로 데이터를 등록하면 해당 요청이 끝나면 그 정보가 없음
				//			-> 해당 페이지를 이용하는 동안 데이터 저장을 유지하려면 session 객체 사용
				//			-> 세션에 저장된 데이터가 사라지는 경우
				// 			-> 1) 세션정보를 지웠을때(로그아웃을 직접 하는 경우)
				//			-> 2) 브라우저를 종료했을때
				//			-> 3) 지정된 시간이 지나면(30분 1시간)
				//			-> 4) 서버가 재시작되면
				//세션에 회원정보 등록
				session.setAttribute("member", member);
				//메인페이지로 이동
				return "redirect:/";
			}
		}
	}
	
	@GetMapping(value="/logout")
	public String logout(HttpSession session) {
		session.invalidate(); // 세션 무효화(모든 세션 데이터 사라짐)
		return "redirect:/";
	}
	
	@GetMapping(value="/joinFrm")
	public String joinFrm() {
		return "member/joinFrm";
	}
	
	@PostMapping(value="/join")
	public String join(Member m, Model model) {
		int result = memberService.insertMember(m);
		model.addAttribute("title", "회원가입 완료");
		model.addAttribute("text", "어서오세요. 환영합니다. 돈쓰고 가세요.");
		model.addAttribute("icon", "success");
		model.addAttribute("loc", "/member/loginFrm");
		return "common/msg";
	}
	
	@GetMapping(value="/checkId")
	public String checkId(String checkId, Model model) {
		Member member = memberService.selectOneMember(checkId);
		if(member == null) {
			//입력받은 아이디로 회원을 조회한 결과가 없는 경우 -> 사용 가능한 아이디
			model.addAttribute("result", 0);
		}else {
			//입력받은 아이디로 회원을 조회한 결과가 있는 경우 -> 중복 아이디
			model.addAttribute("result", 1);
		}
		model.addAttribute("memberId", checkId);
		return "member/checkId";
	}
	
	@GetMapping(value="/mypage")
	public String mypage(String memberId, Model model) {
		Member member = memberService.selectOneMember(memberId);
		model.addAttribute("member", member);
		return "member/mypage";
	}
	
	@PostMapping(value="/update")
	public String update(Member m) {
		int result = memberService.updateMember(m);
		
		return "redirect:/member/mypage?memberId="+m.getMemberId();
	}
	
	@GetMapping(value="/mypage2")
	public String mypage2(@SessionAttribute(required = false) Member member, Model model) {
		if(member == null ) {
			model.addAttribute("title","로그인 확인");
			model.addAttribute("text","로그인 후 이용 가능합니다.");
			model.addAttribute("icon", "info");
			model.addAttribute("loc", "/member/loginFrm");
			return "common/msg";
		}else {
			return "member/mypage2";
		}
	}
	
	@PostMapping(value="/update2")
	public String update2(Member m, HttpSession session) {
		int result = memberService.updateMember(m);
		//세션에 저장된 회원 정보는 로그인한 시점의 DB데이터를 조회해서 저장해둔 상태
		//회원정보에 변화가 발생하면 로그인한 시점의 데이터와 현재 DB가 다른상태
		//-> 세션에 있는 정보를 수정한 정보로 변경
		if(result > 0) {
			Member member = (Member)session.getAttribute("member"); //다운캐스팅 필요
			member.setMemberPw(m.getMemberPw());
			member.setMemberPhone(m.getMemberPhone());
			member.setMemberAddr(m.getMemberAddr());
		}
		
		return "redirect:/member/mypage2";
	}
	
	@GetMapping(value="delete")
	public String delete(@SessionAttribute Member member, Model model, HttpSession session) {
//		Member member = (Member)session.getAttribute("member"); //이 작업을 매개변수 어노테이션이 대신해줌
		int memberNo = member.getMemberNo();
		int result = memberService.deleteMember(memberNo);
		
//		session.invalidate();//로그아웃처리
		model.addAttribute("title", "회원 탈퇴 완료");
		model.addAttribute("text", "만나서 반가웠습니다.");
		model.addAttribute("icon", "success");
		model.addAttribute("loc", "/member/logout");
		return "common/msg";
	}
	
	@ResponseBody
	@GetMapping(value="ajaxCheckId")
	public int ajaxCheckId(String memberId) {
		Member m = memberService.selectOneMember(memberId);
		if(m != null) {
			return 1;
		}else {
			return 0;
		}
	}
	
	@RequestMapping(value="/loginMsg")
	public String loginMsg(Model model) {
		model.addAttribute("title","로그인 확인");
		model.addAttribute("text","로그인 후 이용 가능합니다.");
		model.addAttribute("icon", "info");
		model.addAttribute("loc", "/member/loginFrm");
		return "common/msg";
	}
	
	@RequestMapping(value="/admonMsg")
	public String adminMsg(Model model) {
		model.addAttribute("title","로그인 확인");
		model.addAttribute("text","로그인 후 이용 가능합니다.");
		model.addAttribute("icon", "info");
		model.addAttribute("loc", "/member/loginFrm");
		return "common/msg";
	}
}




















